package com.example.kyna.linguarv1;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.media.AudioManager;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import java.util.Random;
import java.lang.Integer;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class ListenerActivity extends Activity implements TextToSpeech.OnInitListener {

    private GestureDetector mGestureDetector;

    /////////////////voice recognition and general variables/////////////////////
    //variable for checking Voice Recognition support on user device
    private static final int VR_REQUEST = 999;

    //ListView for displaying suggested words
    private ListView wordList;

    //Log tag for output information
    private final String LOG_TAG = "MainActivityTag";

    ////////////////TTS variables/////////////////////
    //variable for checking TTS engine data on user device
    private int MY_DATA_CHECK_CODE = 0;

    //Text To Speech instance
    private TextToSpeech repeatTTS;

    //Spanish Locale
    private Locale spa;
    private Locale eng;

    //remember word said
    private String lastWordSaid;

    //get words said
    private ArrayList<String> suggestedWords;

    private CardScrollAdapter adapter;

    //private Dictionary dict;

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        mGestureDetector = createGestureDetector(this);

        /*
        //load dictionary
        dict = new Dictionary();
        //need new path
        String dictPath = "storage/emulated/0/Documents/dictionarySpEn1.txt";
        dict.LoadDictionary(dictPath);
        */

        repeatTTS = new TextToSpeech(this, this);
        lastWordSaid = "";
        suggestedWords = new ArrayList<String>();

        ////////////////////////////////////////////////////////////////////////////////
        //find out whether speech recognition is supported
        PackageManager packManager = getPackageManager();
        List<ResolveInfo> intActivities = packManager.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH), 0);
        if (intActivities.size() != 0) {
            //speech recognition is supported
            //prepare the TTS to repeat chosen words
            Intent checkTTSIntent = new Intent();
            //check TTS data
            checkTTSIntent.setAction(TextToSpeech.Engine.ACTION_CHECK_TTS_DATA);
            //start the checking Intent - will retrieve result in onActivityResult
            startActivityForResult(checkTTSIntent, MY_DATA_CHECK_CODE);
        }
        else
        {
            //speech recognition not supported
            Toast.makeText(this, "Oops - Speech recognition not supported!", Toast.LENGTH_LONG).show();
        }

        //////////////////////////GET THE SENTENCE/////////////////////////////

        //PARSE WORDS CHOSEN
        //String[] tmpWords = wordChosen.split(" ");

        //dictionary not currently supported
        /*
        //search dictionary for least found word
        List<LookupVal> lowest = new ArrayList<LookupVal>();
        LookupVal nextLV;
        int lowestTimes = Integer.MAX_VALUE;
        for(int i = 0; i < tmpWords.length; i++) {
            nextLV = dict.find(tmpWords[i]);

            if(nextLV != null) {
                if (nextLV.stats.timesSeen == lowestTimes) {
                    lowest.add(nextLV);
                }
                if (nextLV.stats.timesSeen < lowestTimes) {
                    //update lowest val
                    lowestTimes = nextLV.stats.timesSeen;
                    //clear list and add new value
                    lowest.clear();
                    lowest.add(nextLV);
                }
            }
        }
        */

        /*
        //pick one randomly from list
        Random r = new Random();
        String translation, origWord, printTranslation;
        if(lowest.size() != 0) {
            int randomInt = r.nextInt(lowest.size());
            translation = (lowest.get(r.nextInt(lowest.size()))).translation;
            origWord = (lowest.get(r.nextInt(lowest.size()))).word;
            (lowest.get(r.nextInt(lowest.size()))).stats.incTimesSeen();
            printTranslation = translation;

            //output Toast message
            Toast.makeText(MainActivity.this, origWord+" -- "+printTranslation, Toast.LENGTH_SHORT).show();

            //speak the word using the TTS
            repeatTTS.speak(translation, TextToSpeech.QUEUE_FLUSH, null);
        }
        else{
            origWord = "***";
            translation = "No Translation Found";
            printTranslation = "No Word Found";
            repeatTTS.setLanguage(eng);
            //output Toast message
            Toast.makeText(MainActivity.this, origWord+" -- "+printTranslation, Toast.LENGTH_SHORT).show();

            //speak the word using the TTS
            repeatTTS.speak(translation, TextToSpeech.QUEUE_FLUSH, null);
            repeatTTS.setLanguage(spa);
        }
        */

        mView = buildView();


        mCardScroller = new CardScrollView(this);
        adapter = new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        };

        mCardScroller.setAdapter(adapter);

        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                //AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                //am.playSoundEffect(Sounds.DISALLOWED);

                //detect words
                if(lastWordSaid == "") {
                }
                else{
                    mView = buildView();
                    System.out.println("lastWordSaid is "+lastWordSaid);
                    //else, pronounce selected word
                    repeatTTS.speak(lastWordSaid+" idiot", TextToSpeech.QUEUE_FLUSH, null);
                    lastWordSaid = "";
                    mView = buildView();
                }
            }
        });
        setContentView(mCardScroller);
    }


    /**
     * Called when the user presses the speak button
     */
    /*
    public void onClick(View v) {
        if (v.getId() == R.id.speech_btn) {
            //listen for results
            listenToSpeech();
        }
    }
    */

    /**
     * Instruct the app to listen for user speech input
     */
    private void listenToSpeech() {

        //start the speech recognition intent passing required data
        Intent listenIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        //indicate package
        listenIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getClass().getPackage().getName());

        /*
        //message to display while listening
        listenIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Say a word!");
        */

        //set speech model
        listenIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.EXTRA_ONLY_RETURN_LANGUAGE_PREFERENCE);
        //specify number of results to retrieve
        listenIntent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 10);

        //start listening
        startActivityForResult(listenIntent, VR_REQUEST);
    }

    /**
     * onActivityResults handles:
     *  - retrieving results of speech recognition listening
     *  - retrieving result of TTS data check
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        //check speech recognition result
        if (requestCode == VR_REQUEST && resultCode == RESULT_OK)
        {
            //store the returned word list as an ArrayList
            suggestedWords = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
            if(suggestedWords.size() > 0){
                lastWordSaid = suggestedWords.get(0);
            }
            /*
            //set the retrieved list to display in the ListView using an ArrayAdapter
            wordList.setAdapter(new ArrayAdapter<String>(this, R.layout.word, suggestedWords));
            */
        }

        //tss code here
        //returned from TTS data check
        if (requestCode == MY_DATA_CHECK_CODE)
        {
            //we have the data - create a TTS instance
            if (resultCode == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS)
                repeatTTS = new TextToSpeech(this, this);
                //data not installed, prompt the user to install it
            else
            {
                //intent will take user to TTS download page in Google Play
                Intent installTTSIntent = new Intent();
                installTTSIntent.setAction(TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA);
                startActivity(installTTSIntent);
            }
        }

        //call superclass method
        super.onActivityResult(requestCode, resultCode, data);
        mView = buildView();
        adapter.notifyDataSetChanged();
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {

        System.out.println("buildview called");
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        String tmp = "";
        //set text to be translation
        if(lastWordSaid == ""){
            tmp = "Please speak a word.";
            //listen for words
            listenToSpeech();
        }
        else
            tmp = lastWordSaid;

        card.setText(tmp);

        return card.getView();
    }

    /**
     * onInit fires when TTS initializes
     */
    public void onInit(int initStatus) {
        //if successful, set locale
        if (initStatus == TextToSpeech.SUCCESS)
            eng = new Locale("en", "US");
        spa = new Locale("es", "ES");
        repeatTTS.setLanguage(spa);
    }

    private GestureDetector createGestureDetector(Context context) {
        //finalize context i guess??
        final Context c = context;

        GestureDetector gestureDetector = new GestureDetector(context);
        //Create a base listener for generic gestures
        gestureDetector.setBaseListener( new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture) {
                if (gesture == Gesture.TAP) {
                    // do something on tap
                    return true;
                } else if (gesture == Gesture.TWO_TAP) {
                    // do something on two finger tap
                    return true;
                } else if (gesture == Gesture.SWIPE_RIGHT) {
                    // do something on right (forward) swipe
                    return true;
                } else if (gesture == Gesture.SWIPE_LEFT) {
                    // do something on left (backwards) swipe
                    /*
                    Intent homeScreen = new Intent(c, MainActivity.class);
                    startActivity(homeScreen);*/
                    finish();
                    return true;
                }
                return false;
            }
        });
        gestureDetector.setFingerListener(new GestureDetector.FingerListener() {
            @Override
            public void onFingerCountChanged(int previousCount, int currentCount) {
                // do something on finger count changes
            }
        });
        gestureDetector.setScrollListener(new GestureDetector.ScrollListener() {
            @Override
            public boolean onScroll(float displacement, float delta, float velocity) {
                // do something on scrolling
                return false;
            }
        });
        return gestureDetector;
    }

    /*
     * Send generic motion events to the gesture detector
     */
    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mGestureDetector != null) {
            return mGestureDetector.onMotionEvent(event);
        }
        return false;
    }

}
